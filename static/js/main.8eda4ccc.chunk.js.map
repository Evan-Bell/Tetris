{"version":3,"sources":["reportWebVitals.js","board.js","Tetris.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Board","width","height","this","board","score","level","pivot","coor","hold","next","highlevel","highscore","create_board","temp","row","col","next_piece_grab","mutate","specific_piece","piece_num","Math","floor","random","piece","g","update_ghost","ms","Promise","resolve","setTimeout","update_coor","flag","i","solidify_piece","typ","over_stack_check","counter","xPivot","yPivot","new_coor","slice","new_coor_down","new_piv_down","new_coor_up","new_piv_up","new_coor_left","new_piv_left","new_coor_right","new_piv_right","coor_is_valid","coors","length","check","piece_fall","score_increase","gen_piece","next_piece","line_cleared_check","ghost_dist","rows_clear","row_cleared","j","push","cleared_lines_len","max","each","level_score","reset_all","increment","lines_cleared","level_update","update_ContainerView","props","rows_ind","cols_ind","c","className","map","id","game_board","Game_interact","state","updated_state","update_board","bind","handleInput","handleLeft","handleRight","handleRotate","handleDown","setState","prevState","move_left","move_right","rotate_piece","move_drop","event","key","move_hold_swap","onKeyDown","onClick","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8eda4ccc.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/*\nRULES FOR TETRIS\n\nSIZE OF BOARD = 10 WIDE, 20 TALL (24 TALL, BUT ADDITIONAL 4 ARE NOT IN PLAY)\nTYPES OF PIECES = { ALL ARE SIZE 4\n  T, \n  SQUARE, \n  LEFT L,\n  RIGHT L,\n  LEFT Z,\n  RIGHT Z,\n  STRAIGHT\n}\n\nACTIONS AVAIBLE = {\n  MOVE LEFT,\n  MOVE RIGHT, \n  DOWN,\n  ROTATE,\n  MOVE TO HOLD\n}\n\n\n\"NEXT\" contains 3 pieces to come next, not including one in play\n\"HOLD\" contains 1 piece which swaps with the piece in play\n\n\nSCORING = { BASED ON LEVEL (N) AND NUMBER OF LINES CLEARED AT ONCE\n  ONE LINE = 40(N+1)\n  TWO LINES = 100(N+1)\n  THREE LINES 300(N+1)\n  FOUR LINES 1200(N+1)\n}\n*/\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nexport default class Board {\n  //USED TO INITIALIZE THE BOARD\n\n  constructor(width, height) {\n    this.width = width;\n    this.height = height;\n    this.board = [];\n    this.score = 0;\n    this.level = 0;\n    this.pivot = [];\n    this.coor = [\n      [0, 0],\n      [0, 0],\n      [0, 0],\n      [0, 0],\n    ];\n    this.hold = 0;\n    this.next = [0, 0, 0]; //stores next three not including one in play\n    this.highlevel = 0;\n    this.highscore = 0;\n    this.create_board();\n  }\n\n  create_board() {\n    //CREATES BLANK 2D ARRAY OF GIVEN SIZE\n    let temp = [];\n    for (let row = 0; row < this.height; row++) {\n      temp[row] = [];\n      for (let col = 0; col < this.width; col++) {\n        temp[row][col] = 0; //0;\n      }\n    }\n\n    this.board = temp;\n    this.next_piece_grab();\n\n    return this.board;\n  }\n\n  /*\n  TYPES OF PIECES AND CODE VALUES ASSIGNED TO THEM = {\n    EMPTY = 0\n    GHOST/VISUALIZED = 1\n    T = 2\n    SQUARE = 3\n    STRAIGHT LINE = 4\n    NORMAL L = 5\n    BACKWARDS L = 6\n    LEFT Z = 7\n    RIGHT Z = 8\n    (ALL ABOVE ARE FOR PEICE THAT ARE PLACED)\n    (FOR PIECES THAT ARE NOT PLACES, THE CODE WILL BE NEGATIVE THE NUMBER, SO UNPLACED T IS -1)\n  }\n  */\n\n  gen_piece(mutate, specific_piece) {\n    //GENERATES A NEW PIECE\n    const piece_codes = {\n      //EACH PIECE HAS A NUMBER AS A KEY (COLOR AND PEICE INDETIFIER) AND A SET OF 4 COORDINATEES\n      2: [\n        [0, 0],\n        [1, -1],\n        [1, 0],\n        [1, 1],\n        [1, 0], // RELATIVE PIVOT POINT\n      ],\n      3: [\n        [0, 0],\n        [0, 1],\n        [1, 0],\n        [1, 1],\n        [0.5, 0.5], //RELATIVE PIVOT POINT\n      ],\n      4: [\n        [0, -1],\n        [0, 0],\n        [0, 1],\n        [0, 2],\n        [0.5, 0.5], //RELATIVE PIVOT POINT\n      ],\n      5: [\n        [0, 1],\n        [1, -1],\n        [1, 0],\n        [1, 1],\n        [1, 0], //RELATIVE PIVOT POINT\n      ],\n      6: [\n        [0, -1],\n        [1, -1],\n        [1, 0],\n        [1, 1],\n        [1, 0], //RELATIVE PIVOT POINT\n      ],\n      7: [\n        [0, -1],\n        [0, 0],\n        [1, 0],\n        [1, 1],\n        [1, 0], //RELATIVE PIVOT POINT\n      ],\n      8: [\n        [1, -1],\n        [0, 0],\n        [1, 0],\n        [0, 1],\n        [1, 0], //RELATIVE PIVOT POINT\n      ],\n    };\n    let piece_num = Math.floor(Math.random() * 7) + 2; //GETS RANDOM INT FROM RANGE [2,8]\n    if (specific_piece > 1) {\n      piece_num = 1 * specific_piece;\n    }\n    if (mutate) {\n      let piece = piece_codes[piece_num];\n      for (let g = 0; g < 4; g++) {\n        this.board[piece[g][0] + 1][piece[g][1] + 4] = -piece_num;\n      }\n\n      this.pivot = piece[4];\n      this.pivot[0] += 1;\n      this.pivot[1] += 4; //MOVE THE PIVOT ACCORDINGLY\n      this.update_ghost();\n    }\n    return piece_num;\n  }\n\n  sleep(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  piece_fall() {\n    //DROPS PIECE DOWN ONE\n    let coor = this.update_coor(); //grabs Coordinates\n    let flag = true;\n    for (let i = 0; i < 4; i++) {\n      let row = coor[i][0];\n      let col = coor[i][1];\n      if (row == this.height - 1 || this.board[row + 1][col] > 1) {\n        flag = false;\n      }\n    }\n    if (flag != true) {\n      this.solidify_piece();\n    } else {\n      //REMOVES THE SPOT AT EACH OF COORDINATES AND ADDS ONE BELOW EACH COORDINATE\n\n      let typ = this.board[coor[0][0]][coor[0][1]];\n      for (let i = 0; i < 4; i++) {\n        this.board[coor[i][0]][coor[i][1]] = 0;\n      }\n      for (let i = 0; i < 4; i++) {\n        this.board[coor[i][0] + 1][coor[i][1]] = typ;\n      }\n      this.pivot[0] += 1;\n    }\n    this.over_stack_check();\n    return flag;\n  }\n\n  update_coor() {\n    let temp = [[], [], [], []];\n    let counter = 0;\n    for (let row = 0; row < this.height; row++) {\n      for (let col = 0; col < this.width; col++) {\n        if (this.board[row][col] < 0) {\n          this.coor[counter][0] = row;\n          this.coor[counter][1] = col;\n          temp[counter][0] = row;\n          temp[counter][1] = col;\n          counter++;\n        }\n      }\n    }\n    return temp;\n  }\n\n  rotate_piece() {\n    //ROTATES THE PIECE CLOCKWISE\n    // Rules for rotation taken from here https://gamedev.stackexchange.com/questions/17974/how-to-rotate-blocks-in-tetris\n\n    let coor = this.update_coor(); //grabs Coordinates\n\n    //COVERT EACH POINT RELATIVE TO PIVOT then rotates and stores in new_coor\n    let xPivot = this.pivot[0];\n    let yPivot = this.pivot[1];\n    let new_coor = coor.slice(); //copies but without same memory pointer\n    for (let g = 0; g < 4; g++) {\n      let temp = [0, 0];\n      temp[0] = xPivot + (coor[g][1] - yPivot);\n      temp[1] = yPivot + -(coor[g][0] - xPivot);\n      new_coor[g] = temp;\n    }\n\n    let typ = this.board[coor[0][0]][coor[0][1]]; //Stores value to use for replacing same piece\n    //REMOVES THE OLD COOR (NEW COOR IS STILL STORED, SO IT IS OK)\n    for (let i = 0; i < 4; i++) {\n      this.board[coor[i][0]][coor[i][1]] = 0;\n    }\n\n    //CHECK THAT NEW COOR ARE VALID\n    let new_coor_down = [];\n    for (let i = 0; i < 4; i++) {\n      let temp = [];\n      temp[0] = new_coor[i][0] + 1;\n      temp[1] = new_coor[i][1];\n      new_coor_down[i] = temp;\n    }\n    let new_piv_down = [this.pivot[0] + 1, this.pivot[1]];\n\n    let new_coor_up = [];\n    for (let i = 0; i < 4; i++) {\n      let temp = [];\n      temp[0] = new_coor[i][0] - 1;\n      temp[1] = new_coor[i][1];\n      new_coor_up[i] = temp;\n    }\n    let new_piv_up = [this.pivot[0] - 1, this.pivot[1]];\n\n    let new_coor_left = [];\n    for (let i = 0; i < 4; i++) {\n      let temp = [];\n      temp[0] = new_coor[i][0];\n      temp[1] = new_coor[i][1] - 1;\n      new_coor_left[i] = temp;\n    }\n    let new_piv_left = [this.pivot[0], this.pivot[1] - 1];\n\n    let new_coor_right = [];\n    for (let i = 0; i < 4; i++) {\n      let temp = [];\n      temp[0] = new_coor[i][0];\n      temp[1] = new_coor[i][1] + 1;\n      new_coor_right[i] = temp;\n    }\n    let new_piv_right = [this.pivot[0], this.pivot[1] + 1];\n\n    if (this.coor_is_valid(new_coor)) {\n      let throw_away;\n    } else if (this.coor_is_valid(new_coor_down)) {\n      new_coor = new_coor_down;\n      this.pivot = new_piv_down;\n    } else if (this.coor_is_valid(new_coor_left)) {\n      new_coor = new_coor_left;\n      this.pivot = new_piv_left;\n    } else if (this.coor_is_valid(new_coor_right)) {\n      new_coor = new_coor_right;\n      this.pivot = new_piv_right;\n    } else if (this.coor_is_valid(new_coor_up)) {\n      new_coor = new_coor_up;\n      this.pivot = new_piv_up;\n    } else {\n      //Sets old coor as new coor, so no change is made\n      new_coor = coor;\n    }\n\n    //GO THROUGH AND REPLACE each coor WITH new_coor TO MAKE ROTATED PIECE\n\n    for (let i = 0; i < 4; i++) {\n      this.board[new_coor[i][0]][new_coor[i][1]] = typ;\n    }\n\n    this.update_ghost();\n    return new_coor;\n  }\n\n  coor_is_valid(coors) {\n    let flag = true;\n    for (let i = 0; i < 4; i++) {\n      let row = coors[i][0];\n      let col = coors[i][1];\n      if (\n        row > this.board.length - 1 ||\n        row < 0 ||\n        col > this.board[0].length - 1 ||\n        col < 0\n      ) {\n        flag = false;\n        break;\n      }\n      let coor = this.board[row][col];\n      if (coor > 1) {\n        flag = false;\n      }\n    }\n    return flag;\n  }\n\n\n  \n  move_left() {\n    //CHECKS IF MOVE LEFT IS POSSIBLE, THEN DOES IT, OTHERWISE NOTHING\n    let coor = this.update_coor(); //grabs Coordinates\n    let flag = true;\n    if (flag) {\n      for (let i = 0; i < 4; i++) {\n        let row = coor[i][0];\n        let col = coor[i][1];\n        if (col == 0 || this.board[row][col - 1] > 1) {\n          flag = false;\n        }\n      }\n    }\n\n    if (flag != true) {\n      flag = false; //DOES NOTHING\n    } else {\n      //REMOVES THE SPOT AT EACH OF COORDINATES AND ADDS ONE BELOW EACH COORDINATE\n\n      let typ = this.board[coor[0][0]][coor[0][1]];\n      for (let i = 0; i < 4; i++) {\n        this.board[coor[i][0]][coor[i][1]] = 0;\n      }\n      for (let i = 0; i < 4; i++) {\n        this.board[coor[i][0]][coor[i][1] - 1] = typ;\n      }\n      this.pivot[1] -= 1;\n    }\n    this.update_ghost();\n  }\n\n\n\n  move_right() {\n    //CHECKS IF MOVE RIGHT IS POSSIBLE, THEN DOES IT, OTHERWISE NOTHING\n    let coor = this.update_coor(); //grabs Coordinates\n    let flag = true;\n    if (flag) {\n      for (let i = 0; i < 4; i++) {\n        let row = coor[i][0];\n        let col = coor[i][1];\n        if (col == this.board[0].length - 1 || this.board[row][col + 1] > 1) {\n          flag = false;\n        }\n      }\n    }\n\n    if (flag != true) {\n      flag = false; //DOES NOTHING\n    } else {\n      //REMOVES THE SPOT AT EACH OF COORDINATES AND ADDS ONE BELOW EACH COORDINATE\n\n      let typ = this.board[coor[0][0]][coor[0][1]];\n      for (let i = 0; i < 4; i++) {\n        this.board[coor[i][0]][coor[i][1]] = 0;\n      }\n      for (let i = 0; i < 4; i++) {\n        this.board[coor[i][0]][coor[i][1] + 1] = typ;\n      }\n      this.pivot[1] += 1;\n    }\n    this.update_ghost();\n  }\n\n\n\n  move_drop() {\n    //SCANS FOR PEICE, WHEN FOUND IT DOES PIECE_FALL() UNTIL PIECE NO LONGER EXISTS\n    let check = this.piece_fall();\n    this.score_increase(1, 0);\n    return check;\n  }\n\n\n\n  move_hold_swap() {\n    //SWAPS INTO HOLD\n\n    let coor = this.update_coor();\n    if (this.hold < 2) {\n      this.hold = -this.board[coor[0][0]][coor[0][1]];\n      for (let i = 0; i < 4; i++) {\n        this.board[coor[i][0]][coor[i][1]] = 0;\n      }\n      this.next_piece_grab();\n    } else {\n      let temp = 1 * -this.board[coor[0][0]][coor[0][1]];\n      for (let i = 0; i < 4; i++) {\n        this.board[coor[i][0]][coor[i][1]] = 0;\n      }\n      this.gen_piece(true, this.hold);\n      this.hold = 1 * temp; //copies without same memory\n    }\n    return this.hold;\n  }\n\n\n\n  next_piece_grab() {\n    if (this.next[0] == 0 || this.next[1] == 0) {\n      for (let i = 0; i < 3; i++) {\n        this.next[i] = this.gen_piece(false, 0);\n      }\n    }\n    let next_piece = 1 * this.next[0];\n    this.next = [this.next[1], this.next[2], this.gen_piece(false, 0)];\n    this.gen_piece(true, next_piece);\n    return next_piece;\n  }\n\n\n\n\n  solidify_piece() {\n    for (let row = 0; row < this.height; row++) {\n      for (let col = 0; col < this.width; col++) {\n        if (this.board[row][col] < 0) {\n          this.board[row][col] = -this.board[row][col];\n        }\n      }\n    }\n\n    this.line_cleared_check();\n    this.next_piece_grab();\n  }\n\n  update_ghost() {\n    //removes old ghost tiles\n    for (let row = 0; row < this.height; row++) {\n      for (let col = 0; col < this.width; col++) {\n        if (this.board[row][col] == 1) {\n          this.board[row][col] = 0;\n        }\n      }\n    }\n\n    //PUTS THE GHOST piece in\n    let coor = this.update_coor();\n    let counter = 0;\n    let ghost_dist = 0;\n    let flag = true;\n    while (flag) {\n      counter++;\n      for (let i = 0; i < 4; i++) {\n        if (coor[i][0] + counter > this.board.length - 1) {\n          flag = false;\n        } else {\n          let spot = this.board[coor[i][0] + counter][coor[i][1]];\n          if (spot > 1) {\n            flag = false;\n          }\n        }\n      }\n      if (flag) {\n        ghost_dist++;\n      }\n    }\n    for (let i = 0; i < 4; i++) {\n      let spot = this.board[coor[i][0] + ghost_dist][coor[i][1]];\n      if (spot == 0) {\n        this.board[coor[i][0] + ghost_dist][coor[i][1]] = 1;\n      }\n    }\n    return ghost_dist;\n  }\n\n  line_cleared_check() {\n    let rows_clear = [];\n    for (let i = 0; i < this.board.length; i++) {\n      let row_cleared = true;\n      for (let j = 0; j < this.board[i].length; j++) {\n        if (this.board[i][j] <= 1) {\n          row_cleared = false;\n        }\n      }\n      if (row_cleared) {\n        rows_clear.push(i);\n      }\n    }\n    let cleared_lines_len = rows_clear.length;\n    this.score_increase(0, cleared_lines_len);\n\n    for (let i = 0; i < cleared_lines_len; i++) {\n      for (let j = 0; j < this.board[rows_clear[i]].length; j++) {\n        this.board[rows_clear[i]][j] = 0;\n      }\n    }\n    let row_cleared_max = Math.max(...rows_clear);\n\n    for (let i = row_cleared_max; i >= 0; i--) {\n      for (let j = 0; j < this.board[i].length; j++) {\n        if (this.board[i][j] > 1) {\n          let counter = 0;\n          for (let each = 0; each < cleared_lines_len; each++) {\n            if (rows_clear[each] > i) {\n              counter++;\n            }\n          }\n          let temp = this.board[i][j];\n          this.board[i][j] = 0;\n          this.board[i + counter][j] = temp;\n        }\n      }\n    }\n\n    return rows_clear;\n  }\n\n  over_stack_check() {\n    //checks if stack goes above top, then ends if it does\n    let flag = true;\n    for(let i=0; i<this.board[3].length; i++){\n        if(this.board[3][i] > 0){\n          flag = false;\n        }\n    }\n    if(flag != true){\n      let level_score = this.reset_all();\n      this.highscore = Math.max(level_score[1], this.highscore);\n      this.highlevel = Math.max(level_score[0], this.highlevel);\n    }\n  } \n\n\n  level_update(){\n    this.level = Math.max(this.level,Math.floor(this.score/100));\n  }\n\n  reset_all(){\n    //RESETS THE BOARD AND ALL THE SCORE, RETURNS THE SCORE AND LEVEL\n    let score = this.score;\n    let level = this.level;\n    this.board = [];\n    this.score = 0;\n    this.level = 0;\n    this.pivot = [];\n    this.coor = [\n      [0, 0],\n      [0, 0],\n      [0, 0],\n      [0, 0],\n    ];\n    this.hold = 0;\n    this.next = [0, 0, 0]; //stores next three not including one in play\n    this.create_board();\n    return [level, score];\n  }\n\n  score_increase(increment, lines_cleared) {\n    if (lines_cleared == 0) {\n      this.score = this.score + increment;\n    } else {\n      if (lines_cleared == 1) {\n        this.score = this.score + (this.level + 1) * 40;\n      }\n      if (lines_cleared == 2) {\n        this.score = this.score + (this.level + 1) * 100;\n      }\n      if (lines_cleared == 3) {\n        this.score = this.score + (this.level + 1) * 300;\n      }\n      if (lines_cleared > 3) {\n        this.score = this.score + (this.level + 1) * 1200;\n      }\n    }\n    this.level_update();\n    return this.score;\n  }\n}\n","import React from 'react';\nimport Board from \"./board\";\n\n\nconst width = 10;\nconst height = 24; //playable height is 20\n\n\nvar update_ContainerView = function(props) {\n    //DISPLAYS THE BOARD IN A WAY THAT I CAN VISUALLY CONFIRM CHANGES\n    let rows_ind = [];\n    for (let row = 0; row < height; row++) {\n      rows_ind.push(row);\n    }\n\n    let cols_ind = [];\n    for (let col = 0; col < width+2; col++) {\n      cols_ind.push(col);\n    }\n\n\n    let c = 'c'; //USED TO MAKE ID FOR EACH CELL 'C' FOLLOWED BY NUMBER\n    let r = 'r';\n    return (\n        <div className=\"TetrisBoard\">\n            <tr className='TetrisRow'> \n            {cols_ind.map((col) => <td className='TetrisCell' id={c+'Border'}></td> )} \n            </tr>\n        \n            {rows_ind.map((row) => (\n                <tr className='TetrisRow' id={r+row}> \n                    <td className='TetrisCell' id={c+'Border'}></td>\n                    {game_board.board[row].map((col) => <td className='TetrisCell' id={c+col}></td> )} \n                    <td className='TetrisCell' id={c+'Border'}></td>\n                </tr>\n            ))}\n\n            <tr className='TetrisRow'> \n            {cols_ind.map((col) => <td className='TetrisCell' id={c+'Border'}></td> )} \n            </tr>\n        </div>\n    );\n}\n\n\nclass Game_interact extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {updated_state: update_ContainerView()};\n  \n      // This binding is necessary to make `this` work in the callback\n      this.update_board = this.update_board.bind(this);\n      this.handleInput = this.handleInput.bind(this);\n\n      this.handleLeft = this.handleLeft.bind(this);\n      this.handleRight = this.handleRight.bind(this);\n      this.handleRotate = this.handleRotate.bind(this);\n      this.handleDown = this.handleDown.bind(this);\n\n    }\n\n    update_board() {\n        this.setState( prevState => ( {updated_state: update_ContainerView()}));\n    }\n  \n    handleLeft() {\n      game_board.move_left();\n      this.update_board();\n    }\n\n    handleRight() {\n        game_board.move_right();\n        this.update_board();\n      }\n\n    handleRotate() {\n        game_board.rotate_piece();\n        this.update_board();\n      }\n\n    handleDown() {\n        game_board.move_drop();\n        this.update_board();\n      }\n\n    handleInput(event){ //MAKE THIS AUTOCLICK INSTEAD OF HAVING TO GO INTO TEXT BOX\n        switch(event.key) {\n            case 'ArrowLeft': \n              game_board.move_left();\n              break;\n            case 'ArrowRight': \n                game_board.move_right();\n                break;\n            case 'ArrowDown': \n                game_board.move_drop();\n                break;\n            case ' ': \n                game_board.rotate_piece();\n                break;\n            case 'h':\n                game_board.move_hold_swap();\n                break;\n        }\n\n        this.update_board();\n    }\n  \n    render() {\n        return (\n            <div onKeyDown={this.handleInput} className=\"TetrisGame\">\n                \n                <button onClick={this.handleLeft}>\n                    Left\n                </button>\n                <button onClick={this.handleRight}>\n                    Right\n                </button>\n                <button onClick={this.handleRotate}>\n                    Rotate\n                </button>\n                <button onClick={this.handleDown}>\n                    Down\n                </button>\n                <input />\n                <div className='score-display'>Score: {game_board.score}</div>\n                <div className='level-display'>Level: {game_board.level}</div>\n                <div className='hold-display'>Hold: {game_board.hold}</div>\n                <div className='next-display'>Next: {game_board.next}</div>\n                <div className='highscore-display'>Highscore: {game_board.highscore}</div>\n                <div className='highlevel-display'>Highlevel: {game_board.highlevel}</div>\n                \n                {this.state.updated_state}\n                \n            </div>\n        );\n    }\n}\n\n\nvar game_board = new Board(width, height);\nexport default Game_interact;\n  \n //ADD TIME DROPS AND TIME DELAY\n //IMPROVE THE CSS/REACT/JS ASPECT OF SHOWING SO IT IS LESS LAGGY AND LOOKS BETTER\n // MAKE IT SO THE KEYPRESS IS APPLIED WHENEVER SOMEONE IS IN THE TETRIS WINDOW / MOUSE PRESSED IT\n //LEARN CSS FOR GOD SAKE","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\n\nimport Game_interact from './Tetris.js';\n\nReactDOM.render(<Game_interact /> , document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}