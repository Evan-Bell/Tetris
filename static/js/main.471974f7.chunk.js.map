{"version":3,"sources":["reportWebVitals.js","BoardDisplay.js","Controls.js","game.js","useKeyPress.js","App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","StylizedBoardDisplay","props","game_board","inputboard","width","inputwidth","height","inputheight","rows_ind","row","push","cols_ind","col","c","react_default","a","createElement","className","map","id","ControlsDisplay","gameBoard","score","level","hold","next","highscore","highlevel","droptime","Board","_this","this","Object","classCallCheck","board","pivot","pieces","coor","hold_swapped","interval","setInterval","piece_fall","create_board","temp","next_piece_grab","mutate","specific_piece","length","sort","Math","random","piece_num","pop","piece","2","3","4","5","6","7","8","g","update_ghost","ms","Promise","resolve","setTimeout","update_coor","flag","i","solidify_piece","over_stack_check","typ","counter","xPivot","yPivot","new_coor","slice","_this$shift_coor","shift_coor","new_coor_down","new_piv_down","_this$shift_coor2","new_coor_up","new_piv_up","_this$shift_coor3","new_coor_left","new_piv_left","_this$shift_coor4","new_coor_right","new_piv_right","coor_is_valid","Coordinates","piv","ver","hor","shifted_coor","coors","shift_piece","_this2","check","score_increase","clearInterval","diff","gen_piece","next_piece","line_cleared_check","ghost_dist","rows_clear","row_cleared","j","cleared_lines_len","max","apply","each","level_score","reset_all","pow","floor","sqrt","time_drop_calc","lines_cleared","increment","level_update","_this3","useKeyPress","callback","_useState","useState","_useState2","slicedToArray","keyPressed","setKeyPressed","useEffect","downHandler","key","upHandler","window","addEventListener","removeEventListener","Date","start_drop","App","setBoard","_useState3","now","_useState4","setTime","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","sent","stop","arguments","update_board","console","log","_ref2","_callee2","_context2","move_left","make_move","_ref3","_callee3","_context3","move_right","_ref4","_callee4","_context4","move_drop","_ref5","_callee5","_context5","rotate_piece","_ref6","_callee6","_context6","move_hold_swap","_ref7","_callee7","_context7","stop_drop","_ref8","_callee8","_context8","_ref9","_callee9","_context9","hard_drop","_ref10","_callee10","_context10","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.471974f7.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\n\n\nexport default function StylizedBoardDisplay(props) {\n\n    var game_board = props.inputboard;\n    var width = props.inputwidth;\n    var height = props.inputheight;\n    \n    //DISPLAYS THE BOARD IN A WAY THAT I CAN VISUALLY CONFIRM CHANGES\n    let rows_ind = [];\n    for (let row = 0; row < height; row++) {\n      rows_ind.push(row);\n    }\n\n    let cols_ind = [];\n    for (let col = 0; col < width+2; col++) {\n      cols_ind.push(col);\n    }\n\n\n    let c = 'c'; //USED TO MAKE ID FOR EACH CELL 'C' FOLLOWED BY NUMBER\n    let r = 'r';\n    return (\n        <div className=\"TetrisBoard\">\n            <tr className='TetrisRow'> \n            {cols_ind.map((col) => <td className='TetrisCell' id={c+'Border'}></td> )} \n            </tr>\n        \n            {rows_ind.map((row) => (\n                <tr className='TetrisRow' id={r+row}> \n                    <td className='TetrisCell' id={c+'Border'}></td>\n                    {game_board[row].map((col) => <td className='TetrisCell' id={c+col}></td> )} \n                    <td className='TetrisCell' id={c+'Border'}></td>\n                </tr>\n            ))}\n\n            <tr className='TetrisRow'> \n            {cols_ind.map((col) => <td className='TetrisCell' id={c+'Border'}></td> )} \n            </tr>\n        </div>\n    );\n}","import React from 'react';\n\nexport default function ControlsDisplay(props) {\n    var gameBoard = props.inputboard\n    return (\n        <div className=\"TetrisControls\">\n            <div className='score-display'>Score: {gameBoard.score}</div>\n            <div className='level-display'>Level: {gameBoard.level}</div>\n            <div className='hold-display'>Hold: {gameBoard.hold}</div>\n            <div className='next-display'>Next: {gameBoard.next}</div>\n            <div className='highscore-display'>Highscore: {gameBoard.highscore}</div>\n            <div className='highlevel-display'>Highlevel: {gameBoard.highlevel}</div>\n            <div className='droptime'>droptime: {gameBoard.droptime}</div>\n        </div>\n    );\n}\n\n","/*\nRULES FOR TETRIS\n\nSIZE OF BOARD = 10 WIDE, 20 TALL (24 TALL, BUT TOP 4 ARE NOT IN PLAY)\nTYPES OF PIECES = { ALL ARE SIZE 4 SQUARES :\n  T, \n  SQUARE, \n  LEFT L,\n  RIGHT L,\n  LEFT Z,\n  RIGHT Z,\n  STRAIGHT\n}\n\nACTIONS AVAIBLE = {\n  MOVE LEFT,\n  MOVE RIGHT, \n  DOWN,\n  ROTATE,\n  MOVE TO HOLD\n}\n\n\n\"NEXT\" contains 3 pieces to come next, not including one in play\n\"HOLD\" contains 1 piece which swaps with the piece in play\n\n\nSCORING = { BASED ON LEVEL (N) MULTIPLIED BY  NUMBER OF LINES CLEARED AT ONCE\n  ONE LINE = 40(N+1)\n  TWO LINES = 100(N+1)\n  THREE LINES 300(N+1)\n  FOUR LINES 1200(N+1)\n}\n*/\nexport default class Board {\n  //USED TO INITIALIZE THE BOARD\n\n  constructor(width, height) {\n    this.width = width;\n    this.height = height;\n    this.board = [];\n    this.score = 0;\n    this.level = 0;\n    this.pivot = [];\n    this.pieces = [2,3,4,5,6,7,8] //tracks for tetris \"random generator\"\n    this.coor = [\n      [0, 0],\n      [0, 0],\n      [0, 0],\n      [0, 0],\n    ];\n    this.hold = 0;\n    this.hold_swapped = false\n    this.next = [0, 0, 0]; //stores next three not including one in play\n    this.highlevel = 0;\n    this.highscore = 0;\n    this.droptime = 900;\n    this.interval = setInterval(() => {this.piece_fall()}, this.droptime);\n    this.create_board();\n  }\n\n  create_board() {\n    //CREATES BLANK 2D ARRAY OF GIVEN SIZE (HEIGHT AND WIDTH)\n    let temp = [];\n    for (let row = 0; row < this.height; row++) {\n      temp[row] = [];\n      for (let col = 0; col < this.width; col++) {\n        temp[row][col] = 0; //0;\n      }\n    }\n    this.board = temp;\n    this.next_piece_grab();\n\n    return this.board;\n  }\n\n  /*\n  TYPES OF PIECES AND CODE VALUES ASSIGNED TO THEM = {\n    EMPTY = 0\n    GHOST/VISUALIZED = 1\n    T = 2\n    SQUARE = 3\n    STRAIGHT LINE = 4\n    NORMAL L = 5\n    BACKWARDS L = 6\n    LEFT Z = 7\n    RIGHT Z = 8\n    (ALL ABOVE ARE FOR PEICE THAT ARE PLACED)\n    (FOR PIECES THAT ARE NOT PLACES, THE CODE WILL BE NEGATIVE THE NUMBER, SO UNPLACED T IS -1)\n  }\n  */\n\n\n\n  gen_piece(mutate, specific_piece) {\n    //GENERATES A NEW PIECE\n    const piece_codes = {\n      //EACH PIECE HAS A NUMBER AS A KEY (COLOR AND PEICE INDETIFIER) AND A SET OF 4 COORDINATEES, AND A PIVOT POINT\n      2: [\n        [0, 0],\n        [1, -1],\n        [1, 0],\n        [1, 1],\n        [1, 0], // RELATIVE PIVOT POINT\n      ],\n      3: [\n        [0, 0],\n        [0, 1],\n        [1, 0],\n        [1, 1],\n        [0.5, 0.5], //RELATIVE PIVOT POINT\n      ],\n      4: [\n        [0, -1],\n        [0, 0],\n        [0, 1],\n        [0, 2],\n        [0.5, 0.5], //RELATIVE PIVOT POINT\n      ],\n      5: [\n        [0, 1],\n        [1, -1],\n        [1, 0],\n        [1, 1],\n        [1, 0], //RELATIVE PIVOT POINT\n      ],\n      6: [\n        [0, -1],\n        [1, -1],\n        [1, 0],\n        [1, 1],\n        [1, 0], //RELATIVE PIVOT POINT\n      ],\n      7: [\n        [0, -1],\n        [0, 0],\n        [1, 0],\n        [1, 1],\n        [1, 0], //RELATIVE PIVOT POINT\n      ],\n      8: [\n        [1, -1],\n        [0, 0],\n        [1, 0],\n        [0, 1],\n        [1, 0], //RELATIVE PIVOT POINT\n      ],\n    };  \n\n    if(this.pieces.length === 0){ //MAKES IT SO THAT EACH PIECE GETS GIVEN EVENLY\n      this.pieces = [2,3,4,5,6,7,8];\n    }\n    this.pieces = this.pieces.sort(() => {\n      return Math.random() - 0.5;\n    })\n    let piece_num = this.pieces.pop(this.pieces.length-1); //GETS LAST INT FROM RANDOM SORT LIST\n    if (specific_piece > 1) {\n      piece_num = 1 * specific_piece;\n    }\n    if (mutate) {\n      let piece = piece_codes[piece_num];\n      for (let g = 0; g < 4; g++) { //SHIFTS THE PIECE OVER TO CENTER OF BOARD INSTEAD OF DEAD TOP\n        this.board[piece[g][0] + 1][piece[g][1] + 4] = -piece_num;\n      }\n\n      this.pivot = piece[4];\n      this.pivot[0] += 1;\n      this.pivot[1] += 4; //MOVE THE PIVOT ACCORDINGLY WITH THE PIECE SHIFT ABOVE\n      this.update_ghost();\n    }\n    return piece_num;\n  }\n\n  sleep(ms) {//USED FOR FALLING TIMEOUT\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  piece_fall() {\n    //DROPS PIECE DOWN ONE\n    let coor = this.update_coor(); //grabs Coordinates\n    let flag = true;\n    for (let i = 0; i < 4; i++) {\n      let row = coor[i][0];\n      let col = coor[i][1];\n      if (row === this.height - 1 || this.board[row + 1][col] > 1) {\n        flag = false;\n      }\n    }\n    if (flag !== true) {\n      this.solidify_piece();\n      this.over_stack_check();\n    } else {\n      //REMOVES THE SPOT AT EACH OF COORDINATES AND ADDS ONE BELOW EACH COORDINATE\n\n      let typ = this.board[coor[0][0]][coor[0][1]];\n      for (let i = 0; i < 4; i++) {\n        this.board[coor[i][0]][coor[i][1]] = 0;\n      }\n      for (let i = 0; i < 4; i++) {\n        this.board[coor[i][0] + 1][coor[i][1]] = typ;\n      }\n      this.pivot[0] += 1;\n    }\n    return flag;\n  }\n\n  update_coor() {\n    let temp = [[], [], [], []];\n    let counter = 0;\n    for (let row = 0; row < this.height; row++) {\n      for (let col = 0; col < this.width; col++) {\n        if (this.board[row][col] < 0) {\n          this.coor[counter][0] = row;\n          this.coor[counter][1] = col;\n          temp[counter][0] = row;\n          temp[counter][1] = col;\n          counter++;\n        }\n      }\n    }\n    return temp;\n  }\n\n  rotate_piece() {\n    //ROTATES THE PIECE CLOCKWISE\n    // Rules for rotation taken from here https://gamedev.stackexchange.com/questions/17974/how-to-rotate-blocks-in-tetris\n\n    let coor = this.update_coor(); //grabs Coordinates\n\n    //COVERT EACH POINT RELATIVE TO PIVOT then rotates and stores in new_coor\n    let xPivot = this.pivot[0];\n    let yPivot = this.pivot[1];\n    let new_coor = coor.slice(); //copies but without same memory pointer\n    for (let g = 0; g < 4; g++) {\n      let temp = [0, 0];\n      temp[0] = xPivot + (coor[g][1] - yPivot);\n      temp[1] = yPivot + -(coor[g][0] - xPivot);\n      new_coor[g] = temp;\n    }\n\n    let typ = this.board[coor[0][0]][coor[0][1]]; //Stores value to use for replacing same piece\n    //REMOVES THE OLD COOR (NEW COOR IS STILL STORED, SO IT IS OK)\n    for (let i = 0; i < 4; i++) {\n      this.board[coor[i][0]][coor[i][1]] = 0;\n    }\n\n    //GENERATES COORDINATES AND PIV SHIFTED IN EVERY DIR\n    let {new_coor_down, new_piv_down} = this.shift_coor(new_coor, this.pivot, 1, 0);\n    let {new_coor_up, new_piv_up}= this.shift_coor(new_coor, this.pivot, -1, 0);\n    let {new_coor_left, new_piv_left} = this.shift_coor(new_coor, this.pivot, 0, -1);\n    let {new_coor_right, new_piv_right} = this.shift_coor(new_coor, this.pivot, 0, 1);\n\n    //CHECKS THAT NEW POSSIBLE COOR ARE VALID\n    if (this.coor_is_valid(new_coor)) {\n      let throw_away;\n    } else if (this.coor_is_valid(new_coor_down)) {\n      new_coor = new_coor_down;\n      this.pivot = new_piv_down;\n    } else if (this.coor_is_valid(new_coor_left)) {\n      new_coor = new_coor_left;\n      this.pivot = new_piv_left;\n    } else if (this.coor_is_valid(new_coor_right)) {\n      new_coor = new_coor_right;\n      this.pivot = new_piv_right;\n    } else if (this.coor_is_valid(new_coor_up)) {\n      new_coor = new_coor_up;\n      this.pivot = new_piv_up;\n    } else {\n      //Sets old coor as new coor, so no change is made\n      new_coor = coor;\n    }\n\n    //GO THROUGH AND REPLACE each coor WITH new_coor TO MAKE ROTATED PIECE\n    for (let i = 0; i < 4; i++) {\n      this.board[new_coor[i][0]][new_coor[i][1]] = typ;\n    }\n\n    this.update_ghost();\n    return new_coor;\n  }\n\n\n\n  shift_coor(Coordinates, piv, ver, hor){//SHIFTS COOR IN A GIVEN DIR\n    let shifted_coor = []\n    for (let i = 0; i < 4; i++) {\n      let temp = [];\n      temp[0] = Coordinates[i][0] + ver;\n      temp[1] = Coordinates[i][1] + hor;\n      shifted_coor[i] = temp;\n    }\n    let shifted_piv = [piv[0] + ver, piv[1] + hor];\n    return [shifted_coor, shifted_piv];\n  }\n\n  shift_piece(Coordinates, ver, hor){//SHIFTS COOR IN A GIVEN DIR\n    let typ = this.board[Coordinates[0][0]][Coordinates[0][1]];\n      for (let i = 0; i < 4; i++) {\n        this.board[Coordinates[i][0]][Coordinates[i][1]] = 0;\n      }\n      for (let i = 0; i < 4; i++) {\n        this.board[Coordinates[i][0] + ver][Coordinates[i][1] + hor] = typ;\n      }\n      this.pivot[0] += ver;\n      this.pivot[1] += hor;\n      this.update_ghost();\n  }\n\n\n  coor_is_valid(coors) {//CHECKS IF COOR IS VALID\n    let flag = true;\n    for (let i = 0; i < 4; i++) {\n      let row = coors[i][0];\n      let col = coors[i][1];\n      if (\n        row > this.board.length - 1 ||\n        row < 0 ||\n        col > this.board[0].length - 1 ||\n        col < 0\n      ) {\n        flag = false;\n        break;\n      }\n      let coor = this.board[row][col];\n      if (coor > 1) {\n        flag = false;\n      }\n    }\n    return flag;\n  }\n\n\n  \n  move_left() {\n    //CHECKS IF MOVE LEFT IS POSSIBLE, THEN DOES IT, OTHERWISE NOTHING\n    let coor = this.update_coor(); //grabs Coordinates\n    let new_coor = this.shift_coor(coor, this.pivot, 0, -1)[0];\n    if(this.coor_is_valid(new_coor)){\n      this.shift_piece(coor, 0, -1)\n    }\n    return true\n  }\n\n\n\n  move_right() {\n    //CHECKS IF MOVE RIGHT IS POSSIBLE, THEN DOES IT, OTHERWISE NOTHING\n    let coor = this.update_coor(); //grabs Coordinates\n    let new_coor = this.shift_coor(coor, this.pivot, 0, 1)[0];\n    if(this.coor_is_valid(new_coor)){\n      this.shift_piece(coor, 0, 1)\n    }\n    return true\n  }\n\n\n\n  move_drop() {\n    //SCANS FOR PEICE, WHEN FOUND IT DOES PIECE_FALL() UNTIL PIECE NO LONGER EXISTS\n    let check = this.piece_fall();\n    this.score_increase(100);\n    clearInterval(this.interval);\n    this.interval = setInterval(() => {this.piece_fall()}, this.droptime);\n    return check;\n  }\n\n\n  hard_drop(){\n    let diff = 0;\n    let coor = this.update_coor();\n    for (let row = 0; row < this.height; row++) {\n      for (let col = 0; col < this.width; col++) {\n        if (this.board[row][col] === 1) {\n\n          //Used to add 2 points times level times the number of levels dropped\n          diff = 2*(row-coor[0][0]-1); \n\n          this.board[row][col] = this.board[coor[0][0]][coor[0][1]];\n        }\n      }\n    }\n    for (let i = 0; i < 4; i++) {\n      this.board[coor[i][0]][coor[i][1]] = 1;\n    }\n    this.score_increase(diff*100);\n    this.solidify_piece();\n    this.over_stack_check();\n    return true\n  }\n\n\n\n  move_hold_swap() {\n    if(this.hold_swapped === false) {\n      //SWAPS INTO HOLD\n      let coor = this.update_coor();\n      if (this.hold < 2) {\n        this.hold = -this.board[coor[0][0]][coor[0][1]];\n        for (let i = 0; i < 4; i++) {\n          this.board[coor[i][0]][coor[i][1]] = 0;\n        }\n        this.next_piece_grab();\n      } else {\n        let temp = 1 * -this.board[coor[0][0]][coor[0][1]];\n        for (let i = 0; i < 4; i++) {\n          this.board[coor[i][0]][coor[i][1]] = 0;\n        }\n        this.gen_piece(true, this.hold);\n        this.hold = 1 * temp; //copies without same memory\n      }\n      this.hold_swapped = true;\n      return this.hold;\n    }\n  }\n\n\n\n  next_piece_grab() {\n    if (this.next[0] === 0 || this.next[1] === 0) {\n      for (let i = 0; i < 3; i++) {\n        this.next[i] = this.gen_piece(false, 0);\n      }\n    }\n    let next_piece = 1 * this.next[0];\n    this.next = [this.next[1], this.next[2], this.gen_piece(false, 0)];\n    this.gen_piece(true, next_piece);\n    return next_piece;\n  }\n\n\n\n\n  solidify_piece() {\n    let coor = this.update_coor();\n    for (let i = 0; i < 4; i++) {\n      this.board[coor[i][0]][coor[i][1]] *= -1;\n    }\n    this.hold_swapped = false;\n    this.line_cleared_check();\n    this.next_piece_grab();\n  }\n\n  update_ghost() {\n    //removes old ghost tiles\n    for (let row = 0; row < this.height; row++) {\n      for (let col = 0; col < this.width; col++) {\n        if (this.board[row][col] === 1) {\n          this.board[row][col] = 0;\n        }\n      }\n    }\n\n    //PUTS THE GHOST piece in\n    let coor = this.update_coor();\n    let counter = 0;\n    let ghost_dist = 0;\n    let flag = true;\n    while (flag) {\n      counter++;\n      for (let i = 0; i < 4; i++) {\n        if (coor[i][0] + counter > this.board.length - 1) {\n          flag = false;\n        } else {\n          let spot = this.board[coor[i][0] + counter][coor[i][1]];\n          if (spot > 1) {\n            flag = false;\n          }\n        }\n      }\n      if (flag) {\n        ghost_dist++;\n      }\n    }\n    for (let i = 0; i < 4; i++) {\n      let spot = this.board[coor[i][0] + ghost_dist][coor[i][1]];\n      if (spot === 0) {\n        this.board[coor[i][0] + ghost_dist][coor[i][1]] = 1;\n      }\n    }\n    return ghost_dist;\n  }\n\n  line_cleared_check() {\n    let rows_clear = [];\n    for (let i = 0; i < this.board.length; i++) {\n      let row_cleared = true;\n      for (let j = 0; j < this.board[i].length; j++) {\n        if (this.board[i][j] <= 1) {\n          row_cleared = false;\n        }\n      }\n      if (row_cleared) {\n        rows_clear.push(i);\n      }\n    }\n    let cleared_lines_len = rows_clear.length;\n    this.score_increase(cleared_lines_len);\n\n    for (let i = 0; i < cleared_lines_len; i++) {\n      for (let j = 0; j < this.board[rows_clear[i]].length; j++) {\n        this.board[rows_clear[i]][j] = 0;\n      }\n    }\n    let row_cleared_max = Math.max(...rows_clear);\n\n    for (let i = row_cleared_max; i >= 0; i--) {\n      for (let j = 0; j < this.board[i].length; j++) {\n        if (this.board[i][j] > 1) {\n          let counter = 0;\n          for (let each = 0; each < cleared_lines_len; each++) {\n            if (rows_clear[each] > i) {\n              counter++;\n            }\n          }\n          let temp = this.board[i][j];\n          this.board[i][j] = 0;\n          this.board[i + counter][j] = temp;\n        }\n      }\n    }\n\n    return rows_clear;\n  }\n\n  over_stack_check() {\n    //checks if stack goes above top, then ends if it does\n    let flag = true;\n    for(let i=0; i<this.board[3].length; i++){\n        if(this.board[3][i] > 0){\n          flag = false;\n        }\n    }\n    if(flag !== true){\n      let level_score = this.reset_all();\n      this.highscore = Math.max(level_score[1], this.highscore);\n      this.highlevel = Math.max(level_score[0], this.highlevel);\n    }\n  } \n\n  time_drop_calc(){\n    this.droptime = 700*((0.86)**(0.5*(this.level)))+200;\n  }\n\n  level_update(){\n    this.level = Math.max(this.level, Math.floor(     (-65+Math.sqrt(13*(325+this.score*2)))/130  ));\n    this.time_drop_calc();\n  }\n\n  reset_all(){\n    //RESETS THE BOARD AND ALL THE SCORE, RETURNS THE SCORE AND LEVEL\n    let score = this.score;\n    let level = this.level;\n    this.board = [];\n    this.score = 0;\n    this.level = 0;\n    this.droptime = 900;\n    this.pieces = [2,3,4,5,6,7,8] //tracks for tetris \"random generator\"\n    this.pivot = [];\n    this.coor = [\n      [0, 0],\n      [0, 0],\n      [0, 0],\n      [0, 0],\n    ];\n    this.hold = 0;\n    this.hold_swapped = false;\n    this.next = [0, 0, 0]; //stores next three not including one in play\n    this.create_board();\n    return [level, score];\n  }\n\n  score_increase(lines_cleared) {\n    //input of greater than 100 means I want to increment, not lines clear\n\n    if (lines_cleared > 4) {\n      let increment = lines_cleared/100;\n      this.score = this.score + increment*(this.level+1);\n    } else {\n      if (lines_cleared === 1) {\n        this.score = this.score + (this.level + 1) * 40;\n      }\n      if (lines_cleared === 2) {\n        this.score = this.score + (this.level + 1) * 100;\n      }\n      if (lines_cleared === 3) {\n        this.score = this.score + (this.level + 1) * 300;\n      }\n      if (lines_cleared === 4) {\n        this.score = this.score + (this.level + 1) * 1200;\n      }\n      this.level_update();\n    }\n    return this.score;\n  }\n\n  stop_drop(){\n    clearInterval(this.interval);\n  }\n\n  start_drop(){\n    clearInterval(this.interval);\n    this.interval = setInterval(() => {this.piece_fall()}, this.droptime);\n  }\n}\n\n","import { useState, useEffect } from 'react';\n\n//THIS CODE WAS TAKEN FROM https://betterprogramming.pub/create-a-typing-game-with-react-hooks-usekeypress-and-faker-28bbc7919820\n//I DID NOT WRITE IT\n\n\nconst useKeyPress = callback => {\n  const [keyPressed, setKeyPressed] = useState();\n  useEffect(() => {\n    const downHandler = ({ key }) => {\n      if (key.length === 1) {\n        setKeyPressed(key);\n        callback && callback(key);\n      }\n    };\n    const upHandler = () => {\n      setKeyPressed(null);\n    };\n\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  });\n  return keyPressed;\n};\n\nexport default useKeyPress;","import React from 'react';\nimport { useState, useEffect } from 'react';\nimport StylizedBoardDisplay from \"./BoardDisplay\"\nimport ControlsDisplay from './Controls'\nimport Board from './game'\nimport useKeyPress from './useKeyPress'\n\nconst width = 10;\nconst height = 24; //playable height is 20\nvar today = new Date();\nvar gameBoard = new Board(width, height);\ngameBoard.start_drop()\n\nfunction App() {\n    const [game_board, setBoard] = useState(gameBoard.board)\n    const [time, setTime] = useState(Date.now());\n\n    useEffect(() => {\n    const interval = setInterval(() => setTime(Date.now()), 50);\n    return () => {\n        const update_board = async () => {\n            const data = await setBoard(gameBoard.board);\n          }\n        update_board()\n        clearInterval(interval);\n    };\n    }, []);\n\n    useKeyPress(key => {\n        console.log(gameBoard.interval)\n        console.log(key)\n        switch(key) {\n            case 'a': \n                var make_move = async () => {\n                    var data = await gameBoard.move_left();\n                }\n                make_move();\n                break;\n\n            case 'd': \n                var make_move = async () => {\n                    var data = await gameBoard.move_right();\n                }\n                make_move();\n                break;\n\n            case 's': \n                var make_move = async () => {\n                    var data = await gameBoard.move_drop();\n                }\n                make_move();\n                break;\n\n            case 'w': \n                var make_move = async () => {\n                    var data = await gameBoard.rotate_piece();\n                }\n                make_move();\n                break;\n\n            case 'h':\n                var make_move = async () => {\n                    var data = await gameBoard.move_hold_swap();\n                }\n                make_move();\n                break;\n\n            case '-':\n                var make_move = async () => {\n                    var data = await gameBoard.stop_drop();\n                }\n                make_move();\n                break;\n\n            case '=':\n                var make_move = async () => {\n                    const data = await gameBoard.start_drop();\n                }\n                make_move();\n                break;\n\n            case ' ':\n                var make_move = async () => {\n                    const data = await gameBoard.hard_drop();\n                }\n                make_move();\n                break;\n        };\n        const update_board = async () => {\n            const data = await setBoard(gameBoard.board);\n          }\n        update_board()\n    });\n\n    return (\n        <div className=\"TetrisGame\">\n            <ControlsDisplay inputboard={gameBoard}/>\n            <StylizedBoardDisplay inputboard={game_board} inputheight={height} inputwidth={width}/>\n        </div>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\n\nimport App from \"./App.js\"\nReactDOM.render(<App /> , document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}